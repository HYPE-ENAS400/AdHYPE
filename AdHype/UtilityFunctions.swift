//
//  UtilityFunctions.swift
//  MySampleApp
//
//  Use this file to add Utility Functions shared by the App
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.1
//

import Foundation
import Firebase
import UIKit

func generateDemoAddQueue(userUID: String){
    let baseRef = FIRDatabase.database().reference()
    let ref = baseRef.child("users").child(userUID).child("AdQueue")

    for i in 2...9{
        let newNode = ref.childByAutoId()
        newNode.setValue("ads-0" + "\(i)" + ".jpg")
        newNode.setPriority(0)
    }
    for i in 10...33{
        let newNode = ref.childByAutoId()
        newNode.setValue("ads-" + "\(i)" + ".jpg")
        newNode.setPriority(0)
    }

}

//func queryUserNameForUID(uid: String){
//    
//}

func prettyPrintJson(object: AnyObject?) -> String {
    var prettyResult: String = ""
    if object == nil {
        return ""
    } else if let resultArray = object as? [AnyObject] {
        var entries: String = ""
        for index in 0..<resultArray.count {
            if (index == 0) {
                entries = "\(resultArray[index])"
            } else {
                entries = "\(entries), \(prettyPrintJson(resultArray[index]))"
            }
        }
        prettyResult = "[\(entries)]"
    } else if object is NSDictionary  {
        let objectAsDictionary: [String: AnyObject] = object as! [String: AnyObject]
        prettyResult = "{"
        var entries: String = ""
        for (key,_) in objectAsDictionary {
            entries = "\"\(entries), \"\(key)\":\(prettyPrintJson(objectAsDictionary[key]))"
        }
        prettyResult = "{\(entries)}"
        return prettyResult
    } else if let objectAsNumber = object as? NSNumber {
        prettyResult = "\(objectAsNumber.stringValue)"
    } else if let objectAsString = object as? NSString {
        prettyResult = "\"\(objectAsString)\""
    }
    return prettyResult
}

func resizeImage(image: UIImage, newScale: CGFloat) -> UIImage{
    let newWidth = image.size.width * newScale
    let newHeight = image.size.width * newScale
    UIGraphicsBeginImageContext(CGSizeMake(newWidth, newHeight))
    image.drawInRect(CGRectMake(0, 0, newWidth, newHeight))
    let newImage = UIGraphicsGetImageFromCurrentImageContext()
    UIGraphicsEndImageContext()
    
    return newImage
}
